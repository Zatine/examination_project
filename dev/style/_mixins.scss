@mixin color-bg($color){
  @if(lightness($color) > 70){
    background-color: $color;
    color: darken($color, 50);
  }
  @if(lightness($color) < 70){
    background-color: $color;
    color: #fff;
  }
}

@mixin button-style($color){
    @include color-bg($color);
    &:hover{background-color: darken($color, 5);}
    &:active{background-color: darken($color, 15);}
}

@mixin input-buttons{
    display:none;
    & + label span{
      vertical-align: text-bottom;
      display: inline-block;
      border: $border-width solid $blend-color-high;
      background-color: #ffffff;
      cursor: pointer;
      svg{
        fill: $primary-color;
        stroke: $darker-primary;
        stroke-miterlimit:10;
        display: none;
      }
    }
    &:checked + label span svg{
      display: block;
    }
    &:disabled + label span{
      background-color: $blend-color-high;
      cursor: not-allowed;
    }
}

@mixin line-through($left, $right){
    display: table;
    overflow: hidden; 
    padding: 5px 0;
    white-space: nowrap;
    
    &:before, &:after{
      border-top: 1px solid $blend-color-low;
      content: ' ';
      display: table-cell;
      position: relative;
      top: 0.5em;
    }
    &:before { width: $left; right: 2.5%;}
    &:after { width: $right; left: 2.5%;}
}

@mixin colorArrow(
  $direction: down,
  $color: $primary-color,
  $bg: $background-color,
  $size: 15px,
  $pos: 50%,
  $inverse: false){
 
  /* ERROR HANDLING */
  @if $direction != up and $direction != down and $direction != left and $direction != right{
    @error 'Invalid $direction: "#{$direction}". Use up, down, left or right. Default is top.';
  }
  @if $inverse != true and $inverse != false{
    @error 'Invalid $inverse: "#{$inverse}". Use true or false. Default is false.';
  }
    
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-color: transparent;
    border-width: $size;
    
    @if $direction == up or $direction == down{
      left: $pos;
      margin-left: -$size;
    }
    
    @if $direction == up{
      bottom: 100%;
      border-bottom-color: $color;
      @if $inverse == true{
        bottom: 0;
        border-bottom-color: $bg;
      }
    }
    
    @if $direction == down{
      top: 100%;
      border-top-color: $color;
      @if $inverse == true{
        top: 0;
        border-top-color: $bg;
      }
    }

    @if $direction == left or $direction == right{
      top: $pos;
      margin-top: -$size;
    }
    
    @if $direction == right{
      left: 100%;
      border-left-color: $primary-color;
      @if $inverse == true{
        left: 0;
        border-left-color: $bg;
      }
    }
  
    @if $direction == left{
      right: 100%;
      border-right-color: $color;
      @if $inverse == true{
        right: 0;
        border-right-color: $bg;
      }
    }
}

@mixin imageArrow(
  $direction: down,
  $bg: $background-color,
  $size: 15px){
    
  /* ERROR HANDLING */
  @if $direction != up and $direction != down and $direction != left and $direction != right{
    @error 'Invalid $direction: "#{$direction}". Use up, down, left or right. Default is down.';
  }
    
  position: relative;
  
  &:before, &:after{
    position: absolute;
    display: block;
    content:" ";
    z-index: 100;
    pointer-events: none;
  }
  
  @if $direction == down or $direction == up{
    &:before, &:after{width: 50%;}
    &:before{
      left: -$size;
      border-right: $size solid transparent;
    }
    &:after{
      right: -$size;
      border-left: $size solid transparent;
    }
  }
  
  @if $direction == down{
    padding-bottom: $size + $size;
    margin-bottom: -$size;
    &:before, &:after{
      bottom: 0;
      border-bottom: $size + 4 solid $bg;
    }
  }
    
  @if $direction == up{
    padding-top: $size + $size;
    margin-top: -$size;
    &:before, &:after{
      top: 0;
      border-top: $size solid $bg;
    }
  }
  
  @if $direction == left or $direction == right{
    &:before, &:after{height: 50%;}
    &:before{
      top: -$size;
      border-bottom: ($size + 4) solid transparent;
    }
    &:after{
      bottom: -$size;
      border-top: $size solid transparent;
    }
  }
  
  @if $direction == left{
      &:before, &:after{
        left: 0;
        border-left: $size solid $bg;
      }
  }
    
  @if $direction == right{
      &:before, &:after{
        right: 0;
        border-right: $size solid $bg;
      }
  }
}

@mixin slant(
  $direction: y,
  $deg: 2){
    
  /* ERROR HANDLING */
  @if $direction != y and $direction != x {
    @error 'Invalid $direction: "#{$direction}". Use x or y. Default is y.';
  }
    
  position: relative;
  overflow: hidden;
  outline: 1px solid transparent;
  padding: 0;
    
  .content{
    padding: 25px;
    transform: skewY($deg * 1deg);
  }
    
  @if $direction == y{
    transform: skewY(-$deg * 1deg);
    .content{
      transform: skewY($deg * 1deg);
    }
  }

  @if $direction == x{
    transform: skew($deg * 5 * 1deg);
    .content{
      transform: skew(-$deg * 5 * 1deg);
    }
  }

}

@mixin slantEdge(
  $edge: top,
  $deg: 2,
  $color: $primary-color,
  $reverse: false
  ){
    
  /* ERROR HANDLING */
  @if $deg < 1{
    @error '$deg needs to be bigger than 1.';
  }
  @if $edge != top and $edge != bottom and $edge != left and $edge != right{
    @error 'Invalid $edge: "#{$edge}". Use top, bottom, left or right. Default is top.';
  }
  @if $reverse != true and $reverse != false{
    @error 'Invalid $reverse: "#{$reverse}". Use true or false. Default is false.';
  }
    
  content: ' ';
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  transform-origin: left top;
  background: inherit;
  z-index: -999;
    
  @if $edge == top or $edge == bottom{
    left: 0;
    @if $reverse == true{
      transform-origin: right top;
    }
  }
    
  @if $edge == top{
    transform: skewY(-$deg * 1deg);
      @if $reverse == true{
        transform: skewY($deg * 1deg);
      }
  }
    
  @if $edge == bottom{
      transform: skewY($deg * 1deg);
      @if $reverse == true{
        transform: skewY(-$deg * 1deg);
      }
  }
    
  @if $edge == left or $edge == right{
    left: 0;
    @if $reverse == true{
      transform-origin: left bottom;
    }
  }
    
  @if $edge == left{
    left: 0;
    transform: skew(-$deg * 5 * 1deg);
    @if $reverse == true{
      transform: skew($deg * 5 * 1deg);
    }
  }
    
  @if $edge == right{
    right: 0;
    transform: skew($deg * 5 * 1deg);
    @if $reverse == true{
      transform: skew(-$deg * 5 * 1deg);
    }
  }

}

@mixin slantImage(
  $edge: top,
  $deg: 5,
  $bg: $background-color,
  $reverse: false,
  $pseudo: before
  ){
    /* ERROR HANDLING */
  @if $deg < 1{
    @error '$deg needs to be bigger than 1.';
  }
  @if $edge != top and $edge != bottom and $edge != left and $edge != right{
    @error 'Invalid $edge: "#{$edge}". Use top, bottom, left or right. Default is top.';
  }
  @if $pseudo != before and $pseudo != after{
    @error 'Invalid $pseudo: "#{$pseudo}". Use before or after. Default is before.';
  }
  @if $reverse != true and $reverse != false{
    @error 'Invalid $reverse: "#{$reverse}". Use true or false. Default is false.';
  }
  position: relative;
  overflow: hidden;
  &:#{$pseudo}{
    content: ' ';
    width: 100%;
    height: 100%;
    position: absolute;
    background: $bg;
  }
  
  @if $edge == right or $edge == left{
    &:#{$pseudo}{
      top: 0;
      transform-origin: left top;
    }
    @if $reverse == true{
      &:#{$pseudo}{
      transform-origin: left bottom;
      }
    }
  }
    
  @if $edge == right{
    &:#{$pseudo}{
      left: 100%;
      transform: skew(-$deg * 1deg);
    }
    @if $reverse == true{
      &:#{$pseudo}{
        transform: skew($deg * 1deg);
      }
    }
  }
    
  @if $edge == left{
    &:#{$pseudo}{
      right: 100%;
      transform: skew($deg * 1deg);
    }
    @if $reverse == true{
      &:#{$pseudo}{
        transform: skew(-$deg * 1deg);
      }
    }
  }  
    
  @if $edge == top or $edge == bottom{
    &:#{$pseudo}{
      left: 0;
      transform-origin: right top;
    }
    @if $reverse == true{
      &:#{$pseudo}{
        transform-origin: left top;
      }
    }
  }
    
  @if $edge == top{
    &:#{$pseudo}{
      bottom: 100%;
      transform: skewY(-$deg * 1deg);
    }
    @if $reverse == true{
      &:#{$pseudo}{
        transform: skewY($deg * 1deg);
      }
    }
  }
    
  @if $edge == bottom{
    &:#{$pseudo}{
      top: 100%;
      transform: skewY($deg * 1deg);
    }
    @if $reverse == true{
      &:#{$pseudo}{
        transform: skewY(-$deg * 1deg);
      }
    }
  }
}